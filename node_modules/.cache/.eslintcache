[{"/home/kurm/ReactJs/urvi/socket-chat/frontend/src/index.js":"1","/home/kurm/ReactJs/urvi/socket-chat/frontend/src/reportWebVitals.js":"2","/home/kurm/ReactJs/urvi/socket-chat/frontend/src/App.js":"3","/home/kurm/ReactJs/urvi/socket-chat/frontend/src/Components/Join/Join.jsx":"4","/home/kurm/ReactJs/urvi/socket-chat/frontend/src/Components/Chat/Chat.jsx":"5","/home/kurm/ReactJs/urvi/socket-chat/frontend/src/Components/Message/Message.jsx":"6"},{"size":535,"mtime":1690613448564,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1690613448564,"results":"9","hashOfConfig":"8"},{"size":370,"mtime":1690613566181,"results":"10","hashOfConfig":"8"},{"size":1014,"mtime":1690613557017,"results":"11","hashOfConfig":"8"},{"size":2621,"mtime":1690613557009,"results":"12","hashOfConfig":"8"},{"size":404,"mtime":1690613557021,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cu5a7x",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kurm/ReactJs/urvi/socket-chat/frontend/src/index.js",[],[],"/home/kurm/ReactJs/urvi/socket-chat/frontend/src/reportWebVitals.js",[],[],"/home/kurm/ReactJs/urvi/socket-chat/frontend/src/App.js",[],[],"/home/kurm/ReactJs/urvi/socket-chat/frontend/src/Components/Join/Join.jsx",["34","35"],[],"import React, { useState } from 'react';\nimport \"../Join/Join.css\";\nimport Logo from \"../Image/Logo.png\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Join = () => {\n  const [user, setUser] = useState(\"\");\n  const navigate = useNavigate();\n\n  const sendUser = () => {\n    const inputValue = document.getElementById('JoinInput').value.trim();\n    if (inputValue !== '') {\n      setUser(inputValue);\n      navigate('/Chat', { state: { user: inputValue } });\n    } else {\n      toast.error('Please enter a username.');\n    }\n  }\n\n  return (\n    <>\n      <div className='joinPage'>\n        <div className='JoinContainer'>\n          <img src={Logo} alt=\"\" />\n          <h1>C CHAT</h1>\n          <input type=\"text\" id='JoinInput' />\n          <button className='joinButton' onClick={sendUser}>logIn</button>\n        </div>\n      </div>\n      <ToastContainer />\n    </>\n  )\n}\n\nexport default Join;\n","/home/kurm/ReactJs/urvi/socket-chat/frontend/src/Components/Chat/Chat.jsx",["36"],[],"import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport socketIO from \"socket.io-client\";\nimport Message from '../Message/Message';\nimport ReactScrollToBottom from \"react-scroll-to-bottom\"\nimport closeIcon from \"../Image/close1437.jpg\"\nimport \"./Chat.css\"\n\nconst ENDPOINT = \"http://localhost:4500\"; \n\nlet socket;\nconst Chat = () => {\n  const [id, setid] = useState(\"\");\n  const [message, setmessage] = useState([])\n  const location = useLocation();\n  const user = location.state?.user || '';\n\n  const send = () => {\n    const message = document.getElementById('chatInput').value;\n    socket.emit('message', { message, id });\n    document.getElementById('chatInput').value = \"\";\n  }\n\n  useEffect(() => {\n    socket = socketIO(ENDPOINT, { transports: ['websocket'] });\n    socket.on(\"connect\", () => {\n      alert(\"Connected to socket server!\");\n      setid(socket.id);\n    });\n\n    socket.emit('joined', { user });\n\n    socket.on('welcome', (data) => {\n      setmessage([...message,data])\n      console.log(data.user, data.message);\n    });\n\n    socket.on('userJoined', (data) => {\n      setmessage([...message,data])\n      console.log(data.user, data.message);\n    });\n\n    socket.on('leave', (data) => {\n      setmessage([...message,data])\n      console.log(data.user, data.message);\n    });\n\n    return () => {\n      socket.off();\n    };\n  }, []); // Make sure to add 'user' as a dependency, so the useEffect is triggered when user changes\n\n  useEffect(() => {\n    socket.on('sendMessage', (data) => {\n      setmessage([...message,data])\n      console.log(\"dataaaaaaaa\", data);\n      // console.log(data.user, data.message, data.id);\n    });\n\n    return () => {\n      // Clean up any remaining event listeners\n      socket.off('sendMessage');\n    };\n  }, [message]);\n\n  return (\n    <>\n      <div className='ChatPage'>\n        <div className='ChatContainer'>\n          <div className='header'>\n            <h2>C CHAT</h2>\n            <a href=\"/\">\n            <img src={closeIcon} alt=\"close\" />\n            </a>\n          </div>\n          <ReactScrollToBottom className='chatBox'>\n          {message.map((item, i) => <Message user={item.id === id?\"you\" : item.user} message={item.message} classs={item.id === id?'right' :\"left\"} /> )}\n          </ReactScrollToBottom>\n          <div className='inputBox'>\n          <input onKeyPress={(event) => event.key === \"Enter\" ? send() : null} type=\"text\" id='chatInput' />\n            <button onClick={send} className='sendButton'>Send</button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Chat;\n","/home/kurm/ReactJs/urvi/socket-chat/frontend/src/Components/Message/Message.jsx",[],[],{"ruleId":"37","severity":1,"message":"38","line":4,"column":10,"nodeType":"39","messageId":"40","endLine":4,"endColumn":17},{"ruleId":"37","severity":1,"message":"41","line":9,"column":10,"nodeType":"39","messageId":"40","endLine":9,"endColumn":14},{"ruleId":"42","severity":1,"message":"43","line":51,"column":6,"nodeType":"44","endLine":51,"endColumn":8,"suggestions":"45"},"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'message' and 'user'. Either include them or remove the dependency array. You can also do a functional update 'setmessage(m => ...)' if you only need 'message' in the 'setmessage' call.","ArrayExpression",["46"],{"desc":"47","fix":"48"},"Update the dependencies array to be: [message, user]",{"range":"49","text":"50"},[1396,1398],"[message, user]"]